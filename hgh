1. XXL-JOB 定时任务设计任务描述定时任务负责分批迁移和删除 A 表中 2023-07 之前的数据。任务参数（如 2023-07）可以动态传递，控制数据迁移和删除的时间范围。2. XXL-JOB 定时任务实现步骤1. 创建 XXL-JOB Handler在你的应用程序中，编写一个 XXL-JOB Handler，用来实现分批迁移和删除逻辑。以下是一个示例代码，假设使用 Java 语言和 MyBatis 操作数据库：import com.xxl.job.core.handler.annotation.XxlJob;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

@Component
public class DataMigrationJob {

    @Autowired
    private YourMapper yourMapper; // 注入 MyBatis Mapper，用于数据库操作

    @XxlJob("dataMigrationJobHandler")
    public void execute(String param) throws Exception {
        // 参数解析，如传入的时间参数：2023-07
        String[] yearMonth = param.split("-");
        int year = Integer.parseInt(yearMonth[0]);
        int month = Integer.parseInt(yearMonth[1]);

        int batchSize = 10000; // 分批处理的数据量
        long lastId = 0L; // 初始化 lastId

        while (true) {
            // 分批迁移数据
            int rowsInserted = yourMapper.migrateData(year, month, lastId, batchSize);
            if (rowsInserted < batchSize) {
                break; // 如果本批次插入的数据量小于 batchSize，说明数据迁移完成
            }

            // 获取本次迁移的最大ID
            lastId = yourMapper.getLastInsertedId();
        }

        // 迁移完成后，开始分批删除
        lastId = 0L; // 重置 lastId
        while (true) {
            // 分批删除数据
            int rowsDeleted = yourMapper.deleteOldData(year, month, lastId, batchSize);
            if (rowsDeleted < batchSize) {
                break; // 如果本批次删除的数据量小于 batchSize，说明数据删除完成
            }

            // 获取本次删除的最大ID
            lastId = yourMapper.getLastDeletedId();
        }
    }
}2. Mapper 接口创建 MyBatis Mapper 接口，实现迁移和删除的 SQL 逻辑：public interface YourMapper {
    // 分批迁移数据
    @Insert("INSERT INTO A_TEMP (SELECT * FROM A WHERE YEAR(created_at) < #{year} OR (YEAR(created_at) = #{year} AND MONTH(created_at) < #{month}) AND id > #{lastId} ORDER BY id LIMIT #{batchSize})")
    int migrateData(int year, int month, long lastId, int batchSize);

    // 获取最后一个插入的ID
    @Select("SELECT MAX(id) FROM A_TEMP")
    long getLastInsertedId();

    // 分批删除数据
    @Delete("DELETE FROM A WHERE YEAR(created_at) < #{year} OR (YEAR(created_at) = #{year} AND MONTH(created_at) < #{month}) AND id > #{lastId} ORDER BY id LIMIT #{batchSize}")
    int deleteOldData(int year, int month, long lastId, int batchSize);

    // 获取最后一个删除的ID
    @Select("SELECT MAX(id) FROM A WHERE YEAR(created_at) < #{year} OR (YEAR(created_at) = #{year} AND MONTH(created_at) < #{month})")
    long getLastDeletedId();
}3. 在 XXL-JOB 管理控制台配置任务新增任务：任务名称：如 DataMigrationJob任务描述：迁移并删除 A 表中指定时间之前的数据执行器：选择你的执行器任务参数：如 2023-07执行策略：选择合适的执行策略（如失败重试）调度类型：设置成合适的定时策略，如每天凌晨或每周进行迁移定时配置：根据你的需求配置任务的执行频率，避免高峰时段执行，以减小对系统性能的影响。4. 注意事项系统负载：定时任务应在系统负载较低的时段执行，避免对业务系统的影响。批量大小：根据实际数据库性能和系统负载调整 batchSize，以确保任务执行效率和系统稳定性。事务管理：确保批量操作有合适的事务控制，防止数据不一致。日志记录：添加必要的日志记录，以便监控任务执行情况。5. 性能优化建议索引优化：确保 created_at 和 id 字段上有索引，以加快数据检索速度。监控：使用数据库监控工具观察任务执行时的性能变化，并根据实际情况调整批次大小和执行频率。异常处理：在任务中加入异常捕获和处理逻辑，确保即使任务失败也不会对系统造成严重影响，并能及时恢复。这样设置后，XXL-JOB 会定时触发任务，分批迁移和删除数据，同时确保对系统影响最小。
